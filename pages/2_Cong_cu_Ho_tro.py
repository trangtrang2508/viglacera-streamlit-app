# pages/2_Cong_cu_Ho_tro.py
import streamlit as st
import pandas as pd
import re #

st.title("C√¥ng c·ª• H·ªó tr·ª£ Ra quy·∫øt ƒë·ªãnh üõ†Ô∏è")
st.write("S·ª≠ d·ª•ng c√°c c√¥ng c·ª• so s√°nh v√† ∆∞·ªõc t√≠nh ƒë·ªÉ l·ª±a ch·ªçn v·∫≠t li·ªáu t·ªëi ∆∞u cho d·ª± √°n c·ªßa b·∫°n.")

@st.cache_data
def load_products():
    try:
        return pd.read_csv("data/products.csv")
    except FileNotFoundError:
        st.error("Kh√¥ng t√¨m th·∫•y file 'products.csv' trong th∆∞ m·ª•c 'data'.")
        return pd.DataFrame()

products_df = load_products()

if not products_df.empty:
    product_list = products_df['Ten_san_pham'].tolist()

    # --- C√¥ng c·ª• so s√°nh s·∫£n ph·∫©m ---
    st.subheader("C√¥ng c·ª• So s√°nh S·∫£n ph·∫©m")
    st.markdown("Ch·ªçn hai ho·∫∑c ba s·∫£n ph·∫©m ƒë·ªÉ so s√°nh c√°c th√¥ng s·ªë k·ªπ thu·∫≠t v√† ch·ª©ng nh·∫≠n.")

    compare_products = st.multiselect(
        "Ch·ªçn s·∫£n ph·∫©m ƒë·ªÉ so s√°nh:",
        options=product_list,
        max_selections=3, # Cho ph√©p so s√°nh t·ªëi ƒëa 3 s·∫£n ph·∫©m
        key="compare_selector"
    )

    if len(compare_products) >= 2:
        comparison_df = products_df[products_df['Ten_san_pham'].isin(compare_products)]
        # Ch·ªçn c√°c c·ªôt quan tr·ªçng ƒë·ªÉ hi·ªÉn th·ªã khi so s√°nh
        display_cols = ['Ten_san_pham', 'Loai_vat_lieu', 'Chung_nhan', 'He_so_phat_thai', 'Mo_ta_ngan']
        st.table(comparison_df[display_cols].T.reset_index().rename(columns={'index': 'Th√¥ng s·ªë'}))
    elif len(compare_products) == 1:
        st.info("Vui l√≤ng ch·ªçn √≠t nh·∫•t hai s·∫£n ph·∫©m ƒë·ªÉ so s√°nh.")
    else:
        st.info("Ch·ªçn s·∫£n ph·∫©m t·ª´ danh s√°ch tr√™n ƒë·ªÉ b·∫Øt ƒë·∫ßu so s√°nh.")


    st.markdown("---")

    # --- C√¥ng c·ª• ∆∞·ªõc t√≠nh "D·∫•u ch√¢n carbon" ---
    st.subheader("C√¥ng c·ª• ∆Ø·ªõc t√≠nh D·∫•u ch√¢n Carbon")
    st.markdown("∆Ø·ªõc t√≠nh s∆° b·ªô l∆∞·ª£ng ph√°t th·∫£i CO2 c·ªßa v·∫≠t li·ªáu d·ª±a tr√™n di·ªán t√≠ch s·ª≠ d·ª•ng.")

    selected_product_carbon = st.selectbox(
        "Ch·ªçn v·∫≠t li·ªáu c·∫ßn ∆∞·ªõc t√≠nh:",
        options=product_list,
        key="carbon_selector"
    )
    area = st.number_input(
        "Nh·∫≠p di·ªán t√≠ch s·ª≠ d·ª•ng (m¬≤):",
        min_value=1.0,
        value=100.0,
        step=10.0,
        key="area_input"
    )

    if st.button("∆Ø·ªõc t√≠nh D·∫•u ch√¢n Carbon", key="calculate_carbon"):
        product_info = products_df[products_df['Ten_san_pham'] == selected_product_carbon]
        if not product_info.empty:
            he_so_value = product_info['He_so_phat_thai'].iloc[0]

            if pd.notna(he_so_value):
                try:
                    he_so_numeric = 0
                    he_so_str = str(he_so_value).strip() # Chuy·ªÉn th√†nh chu·ªói v√† x√≥a kho·∫£ng tr·∫Øng th·ª´a

                    # B∆∞·ªõc 1: Ch·ªâ tr√≠ch xu·∫•t ph·∫ßn s·ªë v√† d·∫•u g·∫°ch ·ªü ƒë·∫ßu chu·ªói
                    match = re.match(r'^[0-9.\-‚Äì]+', he_so_str)
                    if not match:
                        raise ValueError("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu s·ªë h·ª£p l·ªá.")

                    clean_str = match.group(0)

                    # B∆∞·ªõc 2: Chu·∫©n h√≥a c√°c lo·∫°i d·∫•u g·∫°ch ngang th√†nh 1 lo·∫°i duy nh·∫•t
                    normalized_str = clean_str.replace('‚Äì', '-')

                    # B∆∞·ªõc 3: T√≠nh to√°n nh∆∞ c≈© v·ªõi chu·ªói ƒë√£ ƒë∆∞·ª£c l√†m s·∫°ch
                    if '-' in normalized_str:
                        parts = normalized_str.split('-')
                        if len(parts) != 2: # ƒê·∫£m b·∫£o ch·ªâ c√≥ 2 ph·∫ßn
                            raise ValueError("Kho·∫£ng s·ªë kh√¥ng h·ª£p l·ªá.")
                        low, high = map(float, parts)
                        he_so_numeric = (low + high) / 2
                        st.info(f"H·ªá s·ªë ph√°t th·∫£i l√† m·ªôt kho·∫£ng ({clean_str}). T·∫°m t√≠nh gi√° tr·ªã trung b√¨nh l√† {he_so_numeric:.2f} ƒë·ªÉ ∆∞·ªõc t√≠nh.")
                    else:
                        he_so_numeric = float(normalized_str)

                    # Th·ª±c hi·ªán ph√©p t√≠nh
                    total_co2 = area * he_so_numeric
                    st.success(f"**L∆∞·ª£ng ph√°t th·∫£i CO2 ∆∞·ªõc t√≠nh cho {area} m¬≤ {selected_product_carbon}:** **{total_co2:.2f} kg CO2**")
                    st.info("L∆∞u √Ω: ƒê√¢y l√† ∆∞·ªõc t√≠nh s∆° b·ªô. ƒê·ªÉ c√≥ con s·ªë ch√≠nh x√°c, vui l√≤ng tham kh·∫£o t√†i li·ªáu k·ªπ thu·∫≠t chi ti·∫øt.")

                except (ValueError, TypeError):
                    st.warning(f"Kh√¥ng th·ªÉ t√≠nh to√°n. D·ªØ li·ªáu h·ªá s·ªë ph√°t th·∫£i '{he_so_value}' kh√¥ng h·ª£p l·ªá.")
            else:
                st.warning("Kh√¥ng c√≥ h·ªá s·ªë ph√°t th·∫£i cho s·∫£n ph·∫©m n√†y.")
        else:
            st.error("S·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá.")

else:
    st.info("Vui l√≤ng t·∫£i l√™n file 'products.csv' ƒë·ªÉ s·ª≠ d·ª•ng c√°c c√¥ng c·ª•.")