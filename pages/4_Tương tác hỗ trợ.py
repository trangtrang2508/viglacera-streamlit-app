import streamlit as st
import time
import requests # Th∆∞ vi·ªán ƒë·ªÉ g·ªçi API

# --- SIDEBAR (ƒê·ªÉ ƒë·ªìng b·ªô giao di·ªán) ---
with st.sidebar:
    st.image("images/download.png", use_container_width=True)
    st.title("V·ªÅ Viglacera Xanh")
    st.markdown("""
    **C·ªïng th√¥ng tin VLXD Xanh** l√† m·ªôt s√°ng ki·∫øn c·ªßa Viglacera nh·∫±m cung c·∫•p ki·∫øn th·ª©c v√† c√¥ng c·ª• ƒë·ªÉ h·ªó tr·ª£ c√°c d·ª± √°n x√¢y d·ª±ng b·ªÅn v·ªØng t·∫°i Vi·ªát Nam.
    """)
    st.divider()
    st.markdown("üîó **Li√™n k·∫øt h·ªØu √≠ch**")
    st.link_button("Trang ch·ªß Viglacera üè†", "https://viglacera.com.vn/", use_container_width=True)
    # QUAN TR·ªåNG: ƒê·∫£m b·∫£o t√™n file n√†y kh·ªõp ch√≠nh x√°c v·ªõi file trong th∆∞ m·ª•c 'pages' c·ªßa b·∫°n.
    st.page_link("pages/4_T∆∞∆°ng t√°c h·ªó tr·ª£.py", label="Li√™n h·ªá ch√∫ng t√¥i ‚úâÔ∏è", use_container_width=True)

# --- CSS T√ôY CH·ªàNH CHO GIAO DI·ªÜN ---
st.markdown("""
<style>
    /* Th·∫ª ch·ª©a th√¥ng tin li√™n h·ªá v√† form */
    .contact-container {
        background-color: #ffffff;
        border: 1px solid #e0e0e0;
        border-radius: 10px;
        padding: 25px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.05);
        height: 100%; /* Gi√∫p 2 c·ªôt b·∫±ng nhau */
    }
    .contact-container .stButton>button { width: 100%; border-radius: 8px; background-color: #0A488F; color: #FFFFFF; border: none; padding: 10px 0; transition: background-color 0.3s ease; }
    .contact-container .stButton>button:hover { background-color: #00A99D; }
    
    /* Container cho c√°c n√∫t g·ª£i √Ω */
    .suggestion-container .stButton>button {
        border-radius: 20px;
        padding: 4px 12px;
        font-size: 0.85rem;
        border: 1px solid #0A488F;
        background-color: #FFFFFF;
        color: #0A488F;
        transition: all 0.3s ease;
        font-weight: 600;
        width: 100%;
    }
    .suggestion-container .stButton>button:hover {
        background-color: #F0F2F6;
        border-color: #00A99D;
        color: #00A99D;
    }
</style>
""", unsafe_allow_html=True)


# --- H√ÄM LOGIC M·ªöI CHO CHATBOT (S·ª¨ D·ª§NG GEMINI API) ---
@st.cache_data(show_spinner=False)
def get_ai_response(user_input, chat_history):
    """
    G·ª≠i y√™u c·∫ßu ƒë·∫øn Gemini API v√† nh·∫≠n ph·∫£n h·ªìi t·ª´ AI, v·ªõi kh·∫£ nƒÉng x·ª≠ l√Ω l·ªói chi ti·∫øt.
    """
    if "GEMINI_API_KEY" not in st.secrets:
        return "L·ªói c·∫•u h√¨nh: Kh√¥ng t√¨m th·∫•y `GEMINI_API_KEY`. Vui l√≤ng t·∫°o file `.streamlit/secrets.toml` v√† th√™m key c·ªßa b·∫°n v√†o ƒë√≥."
        
    api_key = st.secrets.get("GEMINI_API_KEY")
    
    if not api_key or api_key == "YOUR_API_KEY_HERE":
        return "L·ªói c·∫•u h√¨nh: Gi√° tr·ªã c·ªßa `GEMINI_API_KEY` ƒëang b·ªã tr·ªëng. Vui l√≤ng ki·ªÉm tra l·∫°i file `.streamlit/secrets.toml`."

    # S·ª≠a l·∫°i API URL cho ch√≠nh x√°c
    api_url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-09-2025:generateContent?key={api_key}"
    
    # Ho√†n thi·ªán k·ªãch b·∫£n cho AI
    system_prompt = """
    B·∫°n l√† m·ªôt tr·ª£ l√Ω ·∫£o am hi·ªÉu v√† chuy√™n nghi·ªáp c·ªßa T·ªïng c√¥ng ty Viglacera. 
    Vai tr√≤ c·ªßa b·∫°n l√† t∆∞ v·∫•n cho kh√°ch h√†ng v·ªÅ c√°c s·∫£n ph·∫©m v·∫≠t li·ªáu x√¢y d·ª±ng (VLXD) xanh c·ªßa Viglacera.
    - T√¥ng gi·ªçng: Th√¢n thi·ªán, chuy√™n nghi·ªáp, v√† h·ªØu √≠ch.
    - Ki·∫øn th·ª©c: Ch·ªâ t·∫≠p trung v√†o c√°c s·∫£n ph·∫©m c·ªßa Viglacera nh∆∞ G·∫°ch b√™ t√¥ng kh√≠ ch∆∞ng √°p (AAC), K√≠nh ti·∫øt ki·ªám nƒÉng l∆∞·ª£ng (Low-E), G·∫°ch ·ªëp l√°t, thi·∫øt b·ªã v·ªá sinh, v.v. v√† c√°c kh√°i ni·ªám li√™n quan ƒë·∫øn x√¢y d·ª±ng xanh.
    - Quy t·∫Øc: 
      1. KH√îNG tr·∫£ l·ªùi c√°c c√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn Viglacera ho·∫∑c VLXD. N·∫øu ƒë∆∞·ª£c h·ªèi, h√£y l·ªãch s·ª± tr·∫£ l·ªùi: "T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa Viglacera v√† ch·ªâ c√≥ th·ªÉ cung c·∫•p th√¥ng tin v·ªÅ c√°c s·∫£n ph·∫©m v√† gi·∫£i ph√°p c·ªßa ch√∫ng t√¥i."
      2. KH√îNG b·ªãa ƒë·∫∑t th√¥ng tin. N·∫øu kh√¥ng bi·∫øt c√¢u tr·∫£ l·ªùi, h√£y n√≥i: "ƒê√¢y l√† m·ªôt c√¢u h·ªèi r·∫•t hay. ƒê·ªÉ c√≥ c√¢u tr·∫£ l·ªùi ch√≠nh x√°c nh·∫•t, b·∫°n vui l√≤ng ƒëi·ªÅn th√¥ng tin v√†o form li√™n h·ªá b√™n c·∫°nh, chuy√™n vi√™n c·ªßa ch√∫ng t√¥i s·∫Ω h·ªó tr·ª£ b·∫°n."
      3. Gi·ªØ c√¢u tr·∫£ l·ªùi ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu.
      4. Khi ƒë∆∞·ª£c h·ªèi v·ªÅ "gi√°" ho·∫∑c "mua ·ªü ƒë√¢u", h√£y h∆∞·ªõng d·∫´n ng∆∞·ªùi d√πng ƒë·∫øn trang "Th√¥ng tin & K·∫øt n·ªëi" ho·∫∑c li√™n h·ªá nh√† ph√¢n ph·ªëi.
    """
    
    history_for_api = []
    for message in chat_history:
        role = "user" if message["role"] == "user" else "model"
        history_for_api.append({"role": role, "parts": [{"text": message["content"]}]})

    payload = {
        "contents": [*history_for_api, {"role": "user", "parts": [{"text": user_input}]}],
        "systemInstruction": {"parts": [{"text": system_prompt}]},
    }
    headers = {'Content-Type': 'application/json'}
    
    try:
        response = requests.post(api_url, headers=headers, json=payload, timeout=20)
        response.raise_for_status() 
        result = response.json()
        
        if "error" in result:
             return f"L·ªói t·ª´ API: {result['error']['message']}"

        candidate = result.get("candidates", [{}])[0]
        if candidate.get("finishReason") == "SAFETY":
            return "R·∫•t ti·∫øc, c√¢u h·ªèi c·ªßa b·∫°n ƒë√£ vi ph·∫°m ch√≠nh s√°ch an to√†n v√† kh√¥ng th·ªÉ ƒë∆∞·ª£c tr·∫£ l·ªùi."

        text_part = candidate.get("content", {}).get("parts", [{}])[0]
        return text_part.get("text", "Xin l·ªói, t√¥i ch∆∞a th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y. Vui l√≤ng th·ª≠ l·∫°i sau.")

    except requests.exceptions.HTTPError as err:
        return f"L·ªói HTTP {err.response.status_code}: Y√™u c·∫ßu ƒë·∫øn server th·∫•t b·∫°i. R·∫•t c√≥ th·ªÉ **API Key c·ªßa b·∫°n kh√¥ng h·ª£p l·ªá** ho·∫∑c ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ki·ªÉm tra l·∫°i."
    except requests.exceptions.RequestException:
        return "L·ªói k·∫øt n·ªëi m·∫°ng. Vui l√≤ng ki·ªÉm tra l·∫°i k·∫øt n·ªëi Internet c·ªßa b·∫°n."
    except (KeyError, IndexError):
        return "R·∫•t ti·∫øc, t√¥i nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá t·ª´ server. Vui l√≤ng th·ª≠ l·∫°i."

# --- GIAO DI·ªÜN CH√çNH ---
st.title("T∆∞∆°ng t√°c v√† H·ªó tr·ª£ üí¨")
st.write("K·∫øt n·ªëi v·ªõi ch√∫ng t√¥i qua chatbot ho·∫∑c g·ª≠i ph·∫£n h·ªìi tr·ª±c ti·∫øp.")

col1, col2 = st.columns([0.6, 0.4])

with col1:
    st.subheader("Chatbot t∆∞ v·∫•n Viglacera")

    if "messages" not in st.session_state:
        st.session_state.messages = [{"role": "assistant", "content": "Ch√†o b·∫°n! T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa Viglacera. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?"}]

    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])
    
    # H·ª£p nh·∫•t logic x·ª≠ l√Ω input
    user_input = None
    if prompt := st.chat_input("B·∫°n c√≥ c√¢u h·ªèi g√¨?"):
        user_input = prompt

    st.write("Ho·∫∑c th·ª≠ m·ªôt trong c√°c c√¢u h·ªèi sau:")
    # B·ªçc c√°c n√∫t g·ª£i √Ω trong container ƒë·ªÉ √°p d·ª•ng CSS
    with st.container():
        st.markdown('<div class="suggestion-container">', unsafe_allow_html=True)
        suggestions = ["∆Øu ƒëi·ªÉm g·∫°ch AAC?", "K√≠nh Low-E l√† g√¨?", "T√¨m nh√† ph√¢n ph·ªëi ·ªü ƒë√¢u?"]
        s_cols = st.columns(len(suggestions))
        for i, suggestion in enumerate(suggestions):
            if s_cols[i].button(suggestion, key=f"suggestion_{i}"):
                user_input = suggestion
        st.markdown('</div>', unsafe_allow_html=True)

    # X·ª≠ l√Ω input sau khi ƒë√£ nh·∫≠n
    if user_input:
        st.session_state.messages.append({"role": "user", "content": user_input})
        with st.chat_message("user"):
            st.markdown(user_input)

        with st.chat_message("assistant"):
            with st.spinner("Vui l√≤ng ch·ªù gi√¢y l√°t..."):
                response = get_ai_response(user_input, st.session_state.messages[:-1])
            st.markdown(response)
        
        st.session_state.messages.append({"role": "assistant", "content": response})
        st.rerun()

with col2:
    st.markdown('<div class="contact-container">', unsafe_allow_html=True)
    st.subheader("Gi·ªõi thi·ªáu & Li√™n h·ªá")
    st.write(
        """
        **T·ªïng c√¥ng ty Viglacera - CTCP** t·ª± h√†o l√† ƒë∆°n v·ªã ti√™n phong trong lƒ©nh v·ª±c s·∫£n xu·∫•t VLXD xanh t·∫°i Vi·ªát Nam, cam k·∫øt v·ªÅ ch·∫•t l∆∞·ª£ng, ƒë·ªïi m·ªõi v√† b·ªÅn v·ªØng.
        
        Ch√∫ng t√¥i lu√¥n s·∫µn l√≤ng l·∫Øng nghe v√† h·ªó tr·ª£ b·∫°n.
        """
    )
    
    with st.form("contact_form", clear_on_submit=True):
        st.write("##### G·ª≠i ph·∫£n h·ªìi cho ch√∫ng t√¥i")
        name = st.text_input("T√™n c·ªßa b·∫°n:", placeholder="Nguy·ªÖn VƒÉn A")
        email = st.text_input("Email c·ªßa b·∫°n:", placeholder="example@email.com")
        message = st.text_area("N·ªôi dung tin nh·∫Øn:", placeholder="T√¥i c·∫ßn t∆∞ v·∫•n v·ªÅ s·∫£n ph·∫©m...")
        submitted = st.form_submit_button("G·ª≠i ph·∫£n h·ªìi")

        if submitted:
            if name and email and message:
                st.success("C·∫£m ∆°n b·∫°n, ph·∫£n h·ªìi c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!")
            else:
                st.error("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß t·∫•t c·∫£ c√°c tr∆∞·ªùng.")
    st.markdown('</div>', unsafe_allow_html=True)

