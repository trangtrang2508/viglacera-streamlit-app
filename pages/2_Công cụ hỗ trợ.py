import streamlit as st
import pandas as pd
import re
import base64
from pathlib import Path

# --- SIDEBAR ---
# S·ª≠ d·ª•ng with st.sidebar ƒë·ªÉ th√™m n·ªôi dung v√†o thanh b√™n tr√°i
with st.sidebar:
    # B·∫°n c√≥ th·ªÉ thay th·∫ø link n√†y b·∫±ng ƒë∆∞·ªùng d·∫´n t·ªõi logo c·ªßa b·∫°n trong th∆∞ m·ª•c /images
    st.image("images/download.png", use_container_width=True)
    st.title("V·ªÅ Viglacera Xanh")
    st.markdown("""
    **C·ªïng th√¥ng tin VLXD Xanh** l√† m·ªôt s√°ng ki·∫øn c·ªßa Viglacera nh·∫±m cung c·∫•p ki·∫øn th·ª©c v√† c√¥ng c·ª• ƒë·ªÉ h·ªó tr·ª£ c√°c d·ª± √°n x√¢y d·ª±ng b·ªÅn v·ªØng t·∫°i Vi·ªát Nam.
    """)
    st.divider()
    st.markdown("üîó **Li√™n k·∫øt h·ªØu √≠ch**")
    # Link ƒë·∫øn trang web ch√≠nh th·ª©c c·ªßa Viglacera
    st.link_button("Trang ch·ªß Viglacera üè†", "https://viglacera.com.vn/", use_container_width=True)
    # Link ƒë·∫øn trang li√™n h·ªá trong ·ª©ng d·ª•ng c·ªßa b·∫°n
    st.page_link("pages/4_T∆∞∆°ng t√°c h·ªó tr·ª£.py", label="Li√™n h·ªá ch√∫ng t√¥i ‚úâÔ∏è", use_container_width=True)

# --- CSS T√ôY CH·ªàNH CHO GIAO DI·ªÜN ---
st.markdown("""
<style>
    /* Th·∫ª so s√°nh s·∫£n ph·∫©m */
    .compare-card {
        background-color: #ffffff;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        padding: 16px;
        height: 100%;
        text-align: center;
        display: flex;
        flex-direction: column;
    }
    .compare-card img {
        width: 80%;
        height: 150px;
        object-fit: cover;
        border-radius: 6px;
        margin-bottom: 16px;
        align-self: center;
    }
    .compare-card h5 {
        font-weight: 700;
        color: #0A488F;
        font-size: 1.1rem;
        margin-bottom: 12px;
        min-height: 44px; /* ƒê·∫£m b·∫£o chi·ªÅu cao ƒë·ªìng nh·∫•t */
    }
    .compare-card hr {
        margin-top: auto; /* ƒê·∫©y ƒë∆∞·ªùng k·∫ª xu·ªëng d∆∞·ªõi */
        margin-bottom: 1rem;
    }
    .compare-card p {
        font-size: 0.95rem;
        color: #333;
    }
    /* Th·∫ª th√¥ng b√°o k·∫øt qu·∫£ carbon ƒë∆∞·ª£c thi·∫øt k·∫ø l·∫°i */
    .carbon-info-box {
        background-color: #E8F5E9; /* N·ªÅn xanh l√° nh·∫°t */
        color: #1B5E20; /* Ch·ªØ xanh l√° ƒë·∫≠m */
        border: 1px solid #A5D6A7;
        border-radius: 8px;
        padding: 15px;
        margin-top: 15px;
        font-size: 0.95rem;
    }
</style>
""", unsafe_allow_html=True)

# --- H√ÄM H·ªñ TR·ª¢ ---
def get_image_as_base64(path):
    try:
        with open(path, "rb") as f:
            data = f.read()
        return base64.b64encode(data).decode()
    except (FileNotFoundError, Exception):
        return None

def parse_emission(value):
    """H√†m x·ª≠ l√Ω chu·ªói h·ªá s·ªë ph√°t th·∫£i v√† tr·∫£ v·ªÅ m·ªôt s·ªë."""
    try:
        he_so_str = str(value)
        match = re.match(r'^[0-9.\-‚Äì]+', he_so_str)
        if not match: return None
        clean_str = match.group(0).replace('‚Äì', '-')
        if '-' in clean_str:
            low, high = map(float, clean_str.split('-'))
            return (low + high) / 2
        else:
            return float(clean_str)
    except: return None

@st.cache_data
def load_products():
    try:
        return pd.read_csv("data/products.csv", encoding='utf-8')
    except FileNotFoundError:
        st.error("Kh√¥ng t√¨m th·∫•y file 'products.csv' trong th∆∞ m·ª•c 'data'.")
        return pd.DataFrame()

# --- GIAO DI·ªÜN CH√çNH ---
st.title("C√¥ng c·ª• H·ªó tr·ª£ Ra quy·∫øt ƒë·ªãnh üõ†Ô∏è")
st.write("S·ª≠ d·ª•ng c√°c c√¥ng c·ª• so s√°nh v√† ∆∞·ªõc t√≠nh ƒë·ªÉ l·ª±a ch·ªçn v·∫≠t li·ªáu t·ªëi ∆∞u cho d·ª± √°n c·ªßa b·∫°n.")

products_df = load_products()

if not products_df.empty:
    product_list = products_df['Ten_san_pham'].tolist()

    # --- C√îNG C·ª§ SO S√ÅNH S·∫¢N PH·∫®M ---
    with st.container():
        st.subheader("So s√°nh S·∫£n ph·∫©m")
        st.markdown("Ch·ªçn hai ho·∫∑c ba s·∫£n ph·∫©m ƒë·ªÉ so s√°nh c√°c th√¥ng s·ªë k·ªπ thu·∫≠t v√† ch·ª©ng nh·∫≠n.")
        
        compare_products = st.multiselect(
            "Ch·ªçn s·∫£n ph·∫©m ƒë·ªÉ so s√°nh:",
            options=product_list,
            max_selections=3
        )

        if len(compare_products) >= 2:
            comparison_df = products_df[products_df['Ten_san_pham'].isin(compare_products)]
            cols = st.columns(len(compare_products))

            for i, product_name in enumerate(compare_products):
                with cols[i]:
                    product_data = comparison_df[comparison_df['Ten_san_pham'] == product_name].iloc[0]
                    image_path = Path(f"images/{product_data['Link_Hinh_anh']}")
                    img_base64 = get_image_as_base64(image_path)
                    
                    img_html = (f'<img src="data:image/png;base64,{img_base64}" alt="{product_data["Ten_san_pham"]}">' if img_base64 
                                else '<div style="height: 150px; display:flex; align-items:center; justify-content:center; background-color:#f0f2f6; border-radius:6px;">No Image</div>')

                    st.markdown(f"""
                    <div class="compare-card">
                        {img_html}
                        <h5>{product_data['Ten_san_pham']}</h5>
                        <hr>
                        <p><strong>Lo·∫°i v·∫≠t li·ªáu:</strong><br>{product_data['Loai_vat_lieu']}</p>
                        <p><strong>Ch·ª©ng nh·∫≠n:</strong><br>{product_data['Chung_nhan']}</p>
                        <p><strong>H·ªá s·ªë ph√°t th·∫£i:</strong><br>{product_data['He_so_phat_thai']}</p>
                    </div>
                    """, unsafe_allow_html=True)

    st.markdown("<br><br>", unsafe_allow_html=True)

    # --- C√îNG C·ª§ ∆Ø·ªöC T√çNH "D·∫§U CH√ÇN CARBON" ---
    with st.container(border=True):
        st.subheader("∆Ø·ªõc t√≠nh D·∫•u ch√¢n Carbon")
        st.markdown("∆Ø·ªõc t√≠nh s∆° b·ªô l∆∞·ª£ng ph√°t th·∫£i CO2 c·ªßa v·∫≠t li·ªáu d·ª±a tr√™n di·ªán t√≠ch s·ª≠ d·ª•ng.")

        col1, col2 = st.columns(2)
        with col1:
            selected_product_carbon = st.selectbox("Ch·ªçn v·∫≠t li·ªáu c·∫ßn ∆∞·ªõc t√≠nh:", options=product_list)
        with col2:
            area = st.number_input("Nh·∫≠p di·ªán t√≠ch s·ª≠ d·ª•ng (m¬≤):", min_value=1.0, value=100.0, step=10.0)

        if st.button("∆Ø·ªõc t√≠nh ngay", type="primary", use_container_width=True):
            product_info = products_df[products_df['Ten_san_pham'] == selected_product_carbon].iloc[0]
            he_so_value = product_info['He_so_phat_thai']
            he_so_numeric = parse_emission(he_so_value)

            if he_so_numeric is not None:
                total_co2 = area * he_so_numeric
                trees_equivalent = total_co2 / 22 
                
                st.metric(label="T·ªïng ph√°t th·∫£i CO2 ∆∞·ªõc t√≠nh", value=f"{total_co2:.2f} kg CO2")
                
                # S·ª¨A L·ªñI: S·ª≠ d·ª•ng th·∫ª div t√πy ch·ªânh thay cho st.info
                st.markdown(f"""
                <div class="carbon-info-box">
                    üí° Con s·ªë n√†y t∆∞∆°ng ƒë∆∞∆°ng v·ªõi l∆∞·ª£ng CO2 m√† kho·∫£ng <strong>{trees_equivalent:.1f} c√¢y xanh</strong> h·∫•p th·ª• trong m·ªôt nƒÉm.
                </div>
                """, unsafe_allow_html=True)
            else:
                st.warning(f"Kh√¥ng th·ªÉ t√≠nh to√°n. D·ªØ li·ªáu h·ªá s·ªë ph√°t th·∫£i '{he_so_value}' kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng c√≥.")
else:
    st.info("Vui l√≤ng t·∫£i l√™n file 'products.csv' ƒë·ªÉ s·ª≠ d·ª•ng c√°c c√¥ng c·ª•.")

