# pages/1_Thu_vien_San_pham.py
import streamlit as st
import pandas as pd

# TH√äM ƒêO·∫†N CSS N√ÄY V√ÄO ƒê√ÇY
st.markdown("""
<style>
/* CSS ƒë·ªÉ √©p c√°c d√≤ng ch·ªØ d√†i ph·∫£i t·ª± xu·ªëng h√†ng */
.st-emotion-cache-1y4p8pa { 
    word-wrap: break-word;
}
</style>
""", unsafe_allow_html=True)

st.title("Th∆∞ vi·ªán S·∫£n ph·∫©m Xanh üåø")
st.write("Kh√°m ph√° danh m·ª•c c√°c v·∫≠t li·ªáu x√¢y d·ª±ng xanh c·ªßa Viglacera v·ªõi c√°c b·ªô l·ªçc th√¥ng minh.")

@st.cache_data # Streamlit s·∫Ω cache d·ªØ li·ªáu ƒë·ªÉ kh√¥ng load l·∫°i m·ªói l·∫ßn thay ƒë·ªïi
def load_products():
    try:
        return pd.read_csv("data/products.csv")
    except FileNotFoundError:
        st.error("Kh√¥ng t√¨m th·∫•y file 'products.csv' trong th∆∞ m·ª•c 'data'. Vui l√≤ng ki·ªÉm tra l·∫°i.")
        return pd.DataFrame()

products_df = load_products()

if not products_df.empty:
    # --- B·ªô l·ªçc n√¢ng cao ---
    st.subheader("B·ªô l·ªçc s·∫£n ph·∫©m")
    col1, col2, col3 = st.columns(3)

    with col1:
        # L·ªçc theo lo·∫°i v·∫≠t li·ªáu (l·∫•y c√°c gi√° tr·ªã duy nh·∫•t t·ª´ c·ªôt Loai_vat_lieu)
        unique_loai = products_df["Loai_vat_lieu"].unique().tolist()
        loai_vat_lieu_selected = st.multiselect(
            "L·ªçc theo lo·∫°i v·∫≠t li·ªáu:",
            options=unique_loai,
            default=[]
        )

    with col2:
        # L·ªçc theo ch·ª©ng nh·∫≠n (c·∫ßn x·ª≠ l√Ω chu·ªói n·∫øu c√≥ nhi·ªÅu ch·ª©ng nh·∫≠n)
        all_certs = []
        for cert_str in products_df["Chung_nhan"].dropna():
            all_certs.extend([c.strip() for c in cert_str.split(',')])
        unique_certs = sorted(list(set(all_certs)))
        chung_nhan_selected = st.multiselect(
            "L·ªçc theo ch·ª©ng nh·∫≠n:",
            options=unique_certs,
            default=[]
        )

    with col3:
        # Thanh t√¨m ki·∫øm th√¥ng minh theo t√™n s·∫£n ph·∫©m ho·∫∑c m√¥ t·∫£
        search_query = st.text_input("T√¨m ki·∫øm theo t√™n ho·∫∑c m√¥ t·∫£ s·∫£n ph·∫©m:")

    # --- √Åp d·ª•ng b·ªô l·ªçc v√† t√¨m ki·∫øm ---
    filtered_df = products_df.copy()

    if loai_vat_lieu_selected:
        filtered_df = filtered_df[filtered_df["Loai_vat_lieu"].isin(loai_vat_lieu_selected)]

    if chung_nhan_selected:
        # L·ªçc s·∫£n ph·∫©m c√≥ √≠t nh·∫•t m·ªôt ch·ª©ng nh·∫≠n ƒë∆∞·ª£c ch·ªçn
        filtered_df = filtered_df[
            filtered_df["Chung_nhan"].apply(
                lambda x: any(c.strip() in chung_nhan_selected for c in str(x).split(','))
            )
        ]

    if search_query:
        filtered_df = filtered_df[
            filtered_df["Ten_san_pham"].str.contains(search_query, case=False, na=False) |
            filtered_df["Mo_ta_ngan"].str.contains(search_query, case=False, na=False)
        ]

    st.markdown("---")
    st.subheader(f"K·∫øt qu·∫£ t√¨m ki·∫øm ({len(filtered_df)} s·∫£n ph·∫©m):")

    # --- Hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m ---
    if filtered_df.empty:
        st.warning("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o ph√π h·ª£p v·ªõi ti√™u ch√≠ l·ªçc.")
    else:
        for index, row in filtered_df.iterrows():
            # S·ª≠ d·ª•ng st.expander ƒë·ªÉ t·∫°o trang chi ti·∫øt s·∫£n ph·∫©m thu g·ªçn
            with st.expander(f"### {row['Ten_san_pham']} - ID: {row['ID']}"):
                col_img, col_info = st.columns([1, 2])
                with col_img:
                    if pd.notna(row['Link_Hinh_anh']):
                        st.image(f"images/{row['Link_Hinh_anh']}", width=250, caption=row['Ten_san_pham'])
                    else:
                        st.image("https://via.placeholder.com/250x200?text=No+Image", width=250)
                with col_info:
                    st.write(f"**M√¥ t·∫£:** {row['Mo_ta_ngan']}")
                    st.write(f"**Lo·∫°i v·∫≠t li·ªáu:** {row['Loai_vat_lieu']}")
                    st.write(f"**Ch·ª©ng nh·∫≠n:** {row['Chung_nhan']}")
                    st.write(f"**H·ªá s·ªë ph√°t th·∫£i:** {row['He_so_phat_thai']} kg CO2/m¬≤ (∆∞·ªõc t√≠nh)")
                    st.markdown(f"**T·∫£i t√†i li·ªáu:**")
                    # Ki·ªÉm tra xem c√≥ link PDF ho·∫∑c link BIM/CAD hay kh√¥ng
                    has_pdf = pd.notna(row['Link_PDF']) and row['Link_PDF'] != 'N/A'
                    has_bim_cad = 'Link_BIM_CAD' in row and pd.notna(row['Link_BIM_CAD']) and row['Link_BIM_CAD'] != 'N/A'
                    # Ch·ªâ hi·ªÉn th·ªã link n·∫øu c√≥
                    if has_pdf:
                        st.markdown(f"- [T√†i li·ªáu k·ªπ thu·∫≠t (PDF)]({row['Link_PDF']})")
                    if has_bim_cad:
                        st.markdown(f"- [M√¥ h√¨nh BIM/CAD]({row['Link_BIM_CAD']})")
                    # Ch·ªâ th√¥ng b√°o khi kh√¥ng c√≥ b·∫•t k·ª≥ t√†i li·ªáu n√†o
                    if not has_pdf and not has_bim_cad:
                        st.info("Ch∆∞a c√≥ t√†i li·ªáu PDF/BIM/CAD.")
else:
    st.info("Vui l√≤ng t·∫£i l√™n file 'products.csv' ƒë·ªÉ xem th∆∞ vi·ªán s·∫£n ph·∫©m.")