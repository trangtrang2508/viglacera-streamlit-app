import streamlit as st
import pandas as pd
import folium
from streamlit_folium import st_folium
import math
import base64
from pathlib import Path

# --- SIDEBAR ---
# S·ª≠ d·ª•ng with st.sidebar ƒë·ªÉ th√™m n·ªôi dung v√†o thanh b√™n tr√°i
with st.sidebar:
    # B·∫°n c√≥ th·ªÉ thay th·∫ø link n√†y b·∫±ng ƒë∆∞·ªùng d·∫´n t·ªõi logo c·ªßa b·∫°n trong th∆∞ m·ª•c /images
    st.image("images/download.png", use_container_width=True)
    st.title("V·ªÅ Viglacera Xanh")
    st.markdown("""
    **C·ªïng th√¥ng tin VLXD Xanh** l√† m·ªôt s√°ng ki·∫øn c·ªßa Viglacera nh·∫±m cung c·∫•p ki·∫øn th·ª©c v√† c√¥ng c·ª• ƒë·ªÉ h·ªó tr·ª£ c√°c d·ª± √°n x√¢y d·ª±ng b·ªÅn v·ªØng t·∫°i Vi·ªát Nam.
    """)
    st.divider()
    st.markdown("üîó **Li√™n k·∫øt h·ªØu √≠ch**")
    # Link ƒë·∫øn trang web ch√≠nh th·ª©c c·ªßa Viglacera
    st.link_button("Trang ch·ªß Viglacera üè†", "https://viglacera.com.vn/", use_container_width=True)
    # Link ƒë·∫øn trang li√™n h·ªá trong ·ª©ng d·ª•ng c·ªßa b·∫°n
    st.page_link("pages/4_T∆∞∆°ng t√°c h·ªó tr·ª£.py", label="Li√™n h·ªá ch√∫ng t√¥i ‚úâÔ∏è", use_container_width=True)

# --- CSS T√ôY CH·ªàNH CHO GIAO DI·ªÜN ---
st.markdown("""
<style>
    /* Th·∫ª b√†i vi·∫øt trong th∆∞ vi·ªán tri th·ª©c */
    .article-card {
        background-color: #ffffff;
        border: 1px solid #e0e0e0;
        border-radius: 10px;
        padding: 0; /* X√≥a padding c≈© ƒë·ªÉ ·∫£nh v·ª´a kh√≠t */
        height: 100%; /* ƒê·∫£m b·∫£o c√°c th·∫ª tr√™n c√πng m·ªôt h√†ng b·∫±ng nhau */
        box-shadow: 0 4px 12px rgba(0,0,0,0.05);
        transition: box-shadow 0.3s ease-in-out;
        display: flex;
        flex-direction: column;
        overflow: hidden; /* ·∫®n ph·∫ßn th·ª´a c·ªßa ·∫£nh */
    }
    .article-card:hover {
        box-shadow: 0 6px 16px rgba(0,0,0,0.1);
    }
    .article-card img {
        width: 100%;
        height: 150px; /* Chi·ªÅu cao c·ªë ƒë·ªãnh cho ·∫£nh */
        object-fit: cover; /* ƒê·∫£m b·∫£o ·∫£nh l·∫•p ƒë·∫ßy m√† kh√¥ng b·ªã m√©o */
    }
    .article-content {
        padding: 20px;
        display: flex;
        flex-direction: column;
        flex-grow: 1; /* Quan tr·ªçng: gi√∫p th·∫ª co gi√£n b·∫±ng nhau */
    }
    .article-card h5 {
        font-weight: 700;
        color: #0A488F;
        margin-top: 0;
        min-height: 50px;
        /* Gi·ªõi h·∫°n 2 d√≤ng cho ti√™u ƒë·ªÅ */
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }
    .article-card p {
        font-size: 0.95rem;
        color: #333;
        flex-grow: 1; /* ƒê·∫©y link xu·ªëng d∆∞·ªõi c√πng */
        /* Gi·ªõi h·∫°n 3 d√≤ng cho t√≥m t·∫Øt */
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }
    .article-card a {
        text-decoration: none;
        color: #00A99D;
        font-weight: 600;
        margin-top: 15px;
    }
    /* Th·∫ª gi·ªØ ch·ªó tr·ªëng */
    .placeholder-card {
        background-color: transparent;
        border: 1px dashed #d0d0d0;
        border-radius: 10px;
        height: 100%;
        min-height: 350px; /* Chi·ªÅu cao t·ªëi thi·ªÉu ƒë·ªÉ b·∫±ng c√°c th·∫ª kh√°c */
    }
    /* C√°c n√∫t b·∫•m (gi·ªØ nguy√™n) */
    .stButton>button { border-radius: 8px; padding: 8px 16px; border: 1px solid #0A488F; background-color: #FFFFFF; color: #0A488F; transition: all 0.3s ease; font-weight: 600; }
    .stButton>button:hover { background-color: #F0F2F6; border-color: #00A99D; color: #00A99D; }
    .stButton>button[kind="primary"] { background-color: #0A488F; color: #FFFFFF; border: none; }
    .stButton>button[kind="primary"]:hover { background-color: #00A99D; }
</style>
""", unsafe_allow_html=True)


# --- H√ÄM H·ªñ TR·ª¢ ---
@st.cache_data
def load_data(file_path):
    try:
        return pd.read_csv(file_path, encoding='utf-8')
    except FileNotFoundError:
        st.error(f"Kh√¥ng t√¨m th·∫•y file '{file_path}'. Vui l√≤ng ki·ªÉm tra l·∫°i.")
        return pd.DataFrame()

def get_image_as_base64(path):
    try:
        with open(path, "rb") as f:
            data = f.read()
        return base64.b64encode(data).decode()
    except (FileNotFoundError, Exception):
        return None

# --- GIAO DI·ªÜN CH√çNH ---
st.title("Th√¥ng tin v√† K·∫øt n·ªëi üåê")
st.write("T√¨m ki·∫øm nh√† cung ·ª©ng, ph√¢n ph·ªëi v√† m·ªü r·ªông ki·∫øn th·ª©c v·ªõi th∆∞ vi·ªán tri th·ª©c c·ªßa ch√∫ng t√¥i.")

# --- B·∫¢N ƒê·ªí NH√Ä CUNG ·ª®NG/PH√ÇN PH·ªêI ---
st.subheader("B·∫£n ƒë·ªì Nh√† cung ·ª©ng v√† Ph√¢n ph·ªëi")
suppliers_df = load_data("data/suppliers.csv")

if not suppliers_df.empty:
    with st.container():
        col1, col2 = st.columns([1, 2])
        # ... (Ph·∫ßn code b·∫£n ƒë·ªì gi·ªØ nguy√™n) ...
        with col1:
            st.markdown("##### B·ªô l·ªçc v√† Danh s√°ch")
            if 'Tinh_Thanh' in suppliers_df.columns:
                unique_cities = ["T·∫•t c·∫£"] + sorted(suppliers_df['Tinh_Thanh'].dropna().unique().tolist())
                selected_city = st.selectbox("Ch·ªçn T·ªânh/Th√†nh ph·ªë:", unique_cities)
                
                if selected_city == "T·∫•t c·∫£":
                    filtered_suppliers = suppliers_df
                else:
                    filtered_suppliers = suppliers_df[suppliers_df['Tinh_Thanh'] == selected_city]
            else:
                st.warning("Thi·∫øu c·ªôt 'Tinh_Thanh' trong suppliers.csv ƒë·ªÉ l·ªçc.")
                filtered_suppliers = suppliers_df
            
            with st.container(height=400, border=False):
                for index, row in filtered_suppliers.iterrows():
                    st.markdown(f"**{row['Ten_nha_cung_ung']}**\n\nüìç {row['Dia_chi']}")
                    st.divider()
        with col2:
            if not filtered_suppliers.empty:
                map_center = [filtered_suppliers['Vi_do'].mean(), filtered_suppliers['Kinh_do'].mean()]
                zoom_start = 9 if selected_city != "T·∫•t c·∫£" else 6
                m = folium.Map(location=map_center, zoom_start=zoom_start)
                
                for index, row in filtered_suppliers.iterrows():
                    folium.Marker(
                        location=[row['Vi_do'], row['Kinh_do']],
                        popup=f"<b>{row['Ten_nha_cung_ung']}</b><br>{row['Dia_chi']}",
                        tooltip=row['Ten_nha_cung_ung']
                    ).add_to(m)
                
                st_folium(m, width=700, height=450)
            else:
                st.info("Kh√¥ng c√≥ nh√† cung ·ª©ng n√†o ph√π h·ª£p v·ªõi b·ªô l·ªçc.")
else:
    st.info("Kh√¥ng c√≥ d·ªØ li·ªáu nh√† cung ·ª©ng ƒë·ªÉ hi·ªÉn th·ªã b·∫£n ƒë·ªì.")

st.markdown("<br><br>", unsafe_allow_html=True)

# --- TH∆Ø VI·ªÜN TRI TH·ª®C (GIAO DI·ªÜN M·ªöI C√ì H√åNH ·∫¢NH) ---
articles_df = load_data("data/articles.csv")

if not articles_df.empty:
    if 'article_page' not in st.session_state:
        st.session_state.article_page = 0
    if 'view_all_articles' not in st.session_state:
        st.session_state.view_all_articles = False

    # --- Header v√† c√°c n√∫t ƒëi·ªÅu khi·ªÉn ---
    header_cols = st.columns([0.5, 0.5])
    with header_cols[0]:
        st.subheader("Th∆∞ vi·ªán Tri th·ª©c")
        st.write("C√°c b√†i vi·∫øt chuy√™n s√¢u v·ªÅ VLXD xanh.")
    
    with header_cols[1]:
        control_cols = st.columns(3)
        button_text = "Thu g·ªçn" if st.session_state.view_all_articles else "Xem t·∫•t c·∫£"
        if control_cols[2].button(button_text, use_container_width=True, key="toggle_view", type="primary"):
            st.session_state.view_all_articles = not st.session_state.view_all_articles
            st.session_state.article_page = 0

        if not st.session_state.view_all_articles:
            if control_cols[0].button("‚óÄ Tr∆∞·ªõc", use_container_width=True, key="prev_article"):
                st.session_state.article_page = max(0, st.session_state.article_page - 1)
            if control_cols[1].button("Sau ‚ñ∂", use_container_width=True, key="next_article"):
                num_pages = math.ceil(len(articles_df) / 3)
                st.session_state.article_page = min(num_pages - 1, st.session_state.article_page + 1)
    st.divider()

    # --- H√†m ƒë·ªÉ hi·ªÉn th·ªã m·ªôt th·∫ª b√†i vi·∫øt ---
    def render_article_card(row):
        image_path = Path(f"images/{row['Link_Hinh_anh']}")
        img_base64 = get_image_as_base64(image_path)
        img_html = (f'<img src="data:image/png;base64,{img_base64}" alt="{row["Tieu_de"]}">' if img_base64 
                    else '<div style="height: 150px; display:flex; align-items:center; justify-content:center; background-color:#f0f2f6;">No Image</div>')

        return f"""
        <div class="article-card">
            {img_html}
            <div class="article-content">
                <h5>{row['Tieu_de']}</h5>
                <p>{row['Tom_tat']}</p>
                <a href="{row['Link_bai_viet']}" target="_blank">ƒê·ªçc b√†i vi·∫øt ƒë·∫ßy ƒë·ªß ‚Üí</a>
            </div>
        </div>
        """

    # --- Hi·ªÉn th·ªã n·ªôi dung ---
    if st.session_state.view_all_articles:
        num_articles = len(articles_df)
        cols = st.columns(3)
        for i in range(num_articles):
            with cols[i % 3]:
                st.markdown(render_article_card(articles_df.iloc[i]), unsafe_allow_html=True)
                st.markdown("<br>", unsafe_allow_html=True)
    else:
        start_index = st.session_state.article_page * 3
        end_index = start_index + 3
        articles_on_page = articles_df.iloc[start_index:end_index]
        
        cols = st.columns(3)
        for i in range(3):
            if i < len(articles_on_page):
                with cols[i]:
                    st.markdown(render_article_card(articles_on_page.iloc[i]), unsafe_allow_html=True)
            else:
                with cols[i]:
                    st.markdown('<div class="placeholder-card"></div>', unsafe_allow_html=True)
else:
    st.info("Ch∆∞a c√≥ b√†i vi·∫øt n√†o trong th∆∞ vi·ªán tri th·ª©c.")

